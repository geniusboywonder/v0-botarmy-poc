"""
This module contains all logic for scanning, listing, and retrieving artifacts.

Artifacts are files generated by the SDLC agents, stored in a structured
directory format. This service provides the necessary functions to interact
with these artifacts from the backend.
"""

import os
from pathlib import Path
from typing import List, Dict, Any

# The root directory for artifacts, relative to the project root.
ARTIFACTS_ROOT = Path("artifacts")


def _scan_directory(path: Path) -> List[Dict[str, Any]]:
    """
    Recursively scans a single directory and returns its structure.
    """
    children = []
    if not path.is_dir():
        return []

    for item in sorted(path.iterdir(), key=lambda x: (x.is_file(), x.name.lower())):
        node: Dict[str, Any] = {
            "name": item.name,
            # Using posix path for consistency across platforms for the frontend
            "path": item.as_posix(),
        }
        if item.is_dir():
            node["type"] = "folder"
            node["children"] = _scan_directory(item)
        else:
            node["type"] = "file"
            try:
                node["size"] = item.stat().st_size
            except OSError:
                node["size"] = 0 # Or handle error appropriately
        children.append(node)
    return children


def get_artifacts_structure() -> Dict[str, List[Dict[str, Any]]]:
    """
    Scans the artifacts directory and returns a dictionary where each key
    is an SDLC phase (e.g., 'requirements', 'design') and the value is the
    structure of that phase's artifacts.
    """
    structure: Dict[str, List[Dict[str, Any]]] = {}
    if not ARTIFACTS_ROOT.exists() or not ARTIFACTS_ROOT.is_dir():
        return {}

    for category_dir in sorted(ARTIFACTS_ROOT.iterdir()):
        if category_dir.is_dir():
            # The key is the name of the directory, e.g., "requirements"
            # The value is the list of files/folders inside it.
            structure[category_dir.name] = _scan_directory(category_dir)

    return structure
